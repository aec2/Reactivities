// index.js
const { app, BrowserWindow, Menu, Tray, nativeImage, ipcMain, Notification } = require('electron');
const path = require('path');

let win;
let tray; // keep a reference or it will be GC’d

// ---- Helper: single instance (recommended for tray apps)
const gotLock = app.requestSingleInstanceLock();
if (!gotLock) {
  app.quit();
} else {
  app.on('second-instance', () => {
    if (win) {
      if (win.isMinimized()) win.restore();
      win.show();
      win.focus();
    }
  });
}

function createWindow() {
  win = new BrowserWindow({
    width: 520,
    height: 420,
    minWidth: 480,
    minHeight: 380,
    backgroundColor: '#0f1221',
    titleBarStyle: process.platform === 'darwin' ? 'hiddenInset' : 'hidden',
    autoHideMenuBar: true,
    webPreferences: {
      // Simple setup since logic lives in index.html
      contextIsolation: false,
      nodeIntegration: true
    }
  });

  win.loadFile(path.join(__dirname, 'index.html'));

  // Close to tray instead of quitting
  win.on('close', (e) => {
    if (!app.isQuiting) {
      e.preventDefault();
      win.hide();
    }
  });
}

function createTray() {
  // Provide your own icon at /assets/tray.png (16x16 or 24x24).
  // On macOS you typically use a monochrome template icon.
  const iconPath = path.join(__dirname, 'assets', process.platform === 'darwin' ? 'trayTemplate.png' : 'tray.png');

  let image;
  try {
    image = nativeImage.createFromPath(iconPath);
  } catch {
    image = nativeImage.createEmpty();
  }

  tray = new Tray(image);
  tray.setToolTip('My Leave Time');

  const contextMenu = Menu.buildFromTemplate([
    { label: 'Show/Hide', click: toggleWindow },
    { type: 'separator' },
    { label: 'Use current time (clamped)', click: () => win?.webContents.send('tray:use-now') },
    { label: 'Set to 08:00', click: () => win?.webContents.send('tray:set-0800') },
    { type: 'separator' },
    { label: 'Quit', click: () => { app.isQuiting = true; app.quit(); } }
  ]);
  tray.setContextMenu(contextMenu);

  // Left click toggles window (Windows/Linux). On macOS, left-click shows window.
  tray.on('click', toggleWindow);
  tray.on('double-click', toggleWindow);
}

function toggleWindow() {
  if (!win) return;
  if (win.isVisible()) {
    win.hide();
  } else {
    win.show();
    win.focus();
  }
}

// Receive updates from the renderer to show in the tray tooltip/title
ipcMain.on('update-leave-time', (_evt, payload) => {
  const { start, leave } = payload || {};
  if (tray && start && leave) {
    // Tooltip works everywhere
    tray.setToolTip(`Start: ${start}  →  Leave: ${leave}`);

    // macOS supports setTitle (text next to tray icon). On Linux some DEs show it, Windows generally ignores it.
    try { tray.setTitle?.(` ${leave}`); } catch {}
    
    // Optional: brief notification on change (Windows/macOS). Commented out by default.
    // if (Notification.isSupported()) {
    //   new Notification({ title: 'Leave time updated', body: `${start} → ${leave}` }).show();
    // }

    // Windows-only balloon (legacy tray balloons)
    // try { tray.displayBalloon?.({ title: 'Leave time', content: `${start} → ${leave}` }); } catch {}
  }
});

app.whenReady().then(() => {
  createWindow();
  createTray();
});

app.on('window-all-closed', () => {
  // Keep app running in tray on Windows/Linux; on macOS you also typically keep it.
  if (process.platform !== 'darwin') {
    // do not quit, we want tray to live; but Electron quits if no windows and no tray refs.
    // We have a tray ref, so it's fine to do nothing here.
  }
});

app.on('activate', () => {
  if (!BrowserWindow.getAllWindows().length) createWindow();
});